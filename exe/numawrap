#!/usr/bin/perl -w

use strict;

use Cwd qw(chdir :DEFAULT);
use File::Basename;
use Getopt::Long;
use Pod::Usage;

sub read_host_list($\@);

Getopt::Long::Configure(qw(no_ignore_case bundling require_order));

my $rank;
if (exists $ENV{PMI_ID}) {
  $rank = $ENV{PMI_ID};
} elsif (exists $ENV{OMPI_COMM_WORLD_LOCAL_RANK}) {
  $rank = $ENV{OMPI_COMM_WORLD_LOCAL_RANK};
} elsif ($ENV{PBS_TASKNUM}) {
  $rank = $ENV{PBS_TASKNUM};
}

if (!defined $rank) {
  print STDERR "ERROR: could not ascertain rank!\n";
}

my $options = {};

GetOptions($options,
           "help|h|?",
           "host-list|hosts-file|hosts|H=s",
           "ranks|rank|r=s@",
           "verbose|v",
          ) or pod2usage(-exitval => 2);

if (!scalar @ARGV) {
  pod2usage(-exitval => 2);
}

pod2usage(-exitval => 1, -verbose => 3) if $options->{help};

$options->{"host-list"} = $ENV{PBS_NODEFILE}
  unless exists $options->{"host-list"};

my @host_list;
read_host_list($options->{"host-list"}, @host_list)
  if defined $options->{"host-list"};

if (exists $options->{ranks}) {
  for (my $i = 0; $i < scalar @{$options->{ranks}}; ++$i) {
    if (@{$options->{ranks}}[$i] =~ m&,&) {
      # Split comma-delimited items.
      splice(@{$options->{ranks}},
             $i,
             1,
             split(/\s*,+\s*/, @{$options->{ranks}}[$i]));
      --$i;
      next;
    } elsif (@{$options->{ranks}}[$i] =~ m&(\d+)\s*-\s*(\d+)&) {
      # Expand ranges.
      splice(@{$options->{ranks}}, $i, 1, $1 .. $2);
    }
  }
}

open(NUMACTLH, "numactl -H|") or die "Unable to run numactl -H.";
my $line = <NUMACTLH>;
chomp $line;
my ($total_nodes) = ($line =~ m&^available:\s*(\d+)&);
close(NUMACTLH);
unless (defined $total_nodes) {
  print STDERR "Unable to ascertain number of numa nodes.\n";
}

my $wanted_node;

if (grep { $_ eq $rank; } @{$options->{ranks}}) {
  if (scalar @host_list) {
    my %nCount = ();
    for (my $rCount = 0; $rCount < scalar @host_list; ++$rCount) {
      grep {$_ eq $rCount;} @{$options->{ranks}} or next;
      if ($rCount == $rank or $host_list[$rCount] eq $host_list[$rank]) {
        $wanted_node = $nCount{$host_list[$rank]}++ % $total_nodes;
        last;
      }
    }
  } else {                      # All on one host.
    foreach my $rCount (grep {$_ eq $rank;} @{$options->{ranks}}) {
      if ($rCount == $rank) {
        $wanted_node = $rCount % $total_nodes;
      }
      ++$rCount;
    }
  }
}

my @cmd = (defined $wanted_node)?("numactl", "--preferred", "$wanted_node", "--cpunodebind", "$wanted_node", "--"):();
$ENV{MV2_ENABLE_AFFINITY} = 0
  if scalar @cmd; # Disable mvapich2's own NUMA affinity handling.

splice @cmd, $#cmd + 1, 0, @ARGV;

my $hostname = `hostname -f`;
chomp $hostname;

print STDERR sprintf("numawrap on host %s: executing %s.\n",
                     $host_list[$rank] || $hostname || "UNKNOWN",
                     join(" ", @cmd))
  if $options->{verbose};

exec @cmd or die sprintf("EXEC error $!: could not execute %s", join(" ", @cmd));

1;

sub read_host_list($\@) {
  open(HOSTLIST, shift) or die "Unable to open specified host_list file.";
  my $host_list_ref = shift;
  @{$host_list_ref} = <HOSTLIST>;
  chomp @{$host_list_ref};
  close(HOSTLIST);
}

__END__

=pod

=head1 NAME

numawrap: Execute a program with numa memory and CPU binding directives
based on its rank.

=head1 SYNOPSIS

B<numawrap> B<--help|-h|-?>

B<numawrap> [I<options> [--]] I<prog> [I<args>]

I<Options>: B<--host-list|--hosts-file|--hosts|-H> I<hosts-file> |
         B<--ranks|--rank|-r> I<rank-spec>+ |
         B<--verbose|-v>

Options marked with B<+> are repeatable and cumulative.

=head1 DESCRIPTION

I<numawrap> is a tool to allow the binding of an MPI process' memory and
computing core to a particular numa node based on its rank and host. The
user specifies the hosts file (or it is picked up from the environment
if PBS is involved) and the disposition of the various ranks (see
B<--ranks> below) and each invocation of I<prog> is bound (or not) as
appropriate.

=head2 ARGUMENTS

=over

=item B<--help|-h|-?>

This help.

=item B<--host-list|--hosts-file|--hosts|-H> I<hosts-file>

Specify the file containing the lists of hosts (in rank order), one line
per rank. If not specified, $PBS_NODEFILE will be used if available.

=item B<--ranks|--rank|-r> I<rank-spec>+

The B<--ranks> option may be specified multiple times. Each I<rank-spec>
argument may be a single number or a comma-separated list of single
numbers and / or ranges [a-b] specified as I<a-b>.

=item B<--verbose|-v>

Indicate the numa parameters used (if any) prior to invoking I<prog>.

=back

=head1 ENVIRONMENT VARIABLES

=over

=item B<PMI_ID>

=item B<OMPI_COMM_WORLD_LOCAL_RANK>

=item B<PBS_TASKNUM>

Environment variables (in precedence order) which may be used to
ascertain the rank of the current process.

=item B<PBS_NODEFILE>

The file containing the list of hosts on which each process must run in
rank order (one line per rank).

=back

=cut
