#define BOOST_TEST_MODULE ( CommandableFragmentGenerator_t )
#include "boost/test/auto_unit_test.hpp"

#include "artdaq-core/Data/Fragment.hh"
#include "artdaq/Application/CommandableFragmentGenerator.hh"

namespace artdaqtest
{
	class CommandableFragmentGeneratorTest;
}

/**
 * \brief CommandableFragmentGenerator derived class for testing
 */
class artdaqtest::CommandableFragmentGeneratorTest :
	public artdaq::CommandableFragmentGenerator
{
public:
	/**
	 * \brief CommandableFragmentGeneratorTest Constructor
	 */
	CommandableFragmentGeneratorTest();

	/**
	 * \brief Generate data and return it to CommandableFragmentGenerator
	 * \param frags FragmentPtrs list that new Fragments should be added to
	 * \return True if data was generated
	 * 
	 * CommandableFragmentGeneratorTest merely default-constructs Fragments, emplacing them on the frags list. 
	 */
	bool getNext_(artdaq::FragmentPtrs& frags) override;

	/**
	 * \brief Get the Fragment IDs generated by the CommandableFragmentGenerator
	 * \return CommandableFragmentGeneratorTest returns a vector containing 1.
	 */
	std::vector<artdaq::Fragment::fragment_id_t> fragmentIDs() override;

	/**
	 * \brief Perform start actions. No-Op
	 */
	void start() override;

	/**
	 * \brief Perform immediate stop actions. No-Op
	 */
	void stopNoMutex() override;

	/**
	* \brief Perform stop actions. No-Op
	*/
	void stop() override;

	/**
	 * \brief Perform pause actions. No-Op
	 */
	void pause() override;

	/**
	 * \brief Perform resume actions. No-Op
	 */
	void resume() override;
};

artdaqtest::CommandableFragmentGeneratorTest::CommandableFragmentGeneratorTest()

	:
	CommandableFragmentGenerator() {}

bool
artdaqtest::CommandableFragmentGeneratorTest::getNext_(artdaq::FragmentPtrs& frags)
{
	frags.emplace_back(new artdaq::Fragment);
	return true;
}

std::vector<artdaq::Fragment::fragment_id_t>
artdaqtest::CommandableFragmentGeneratorTest::
fragmentIDs()
{
	return {1};
}

void
artdaqtest::CommandableFragmentGeneratorTest::start() { }

void
artdaqtest::CommandableFragmentGeneratorTest::stopNoMutex() { }

void
artdaqtest::CommandableFragmentGeneratorTest::stop() { }

void
artdaqtest::CommandableFragmentGeneratorTest::pause() { }

void
artdaqtest::CommandableFragmentGeneratorTest::resume() { }

BOOST_AUTO_TEST_SUITE(CommandableFragmentGenerator_t)

	BOOST_AUTO_TEST_CASE(Simple)
	{
		artdaqtest::CommandableFragmentGeneratorTest testGen;
		artdaq::CommandableFragmentGenerator& baseGen(testGen);
		artdaq::FragmentPtrs fps;
		baseGen.getNext(fps);
		BOOST_REQUIRE_EQUAL(fps.size(), 1u);
	}

BOOST_AUTO_TEST_SUITE_END()
