# The parent line must be the first non-comment line in the file
# This line defines the product name and version
parent artdaq  
defaultqual    e20:s128

# These optional lines define the installed directories where
# headers, libraries, and executables will be found
# Use them only if your product does not conform to the defaults
# Format: directory_type directory_path directory_name
# The only recognized values of the first field are incdir, libdir, and bindir
# The only recognized values of the second field are product_dir and fq_dir
# The third field is not constrained
# The examples here reflect the defaults
incdir      product_dir include
libdir      fq_dir      lib
bindir      fq_dir      bin
fcldir      product_dir fcl

define_pythonpath
old_style_config_vars

#
product					version		qual	flags			<table_format=2>
art_root_io				v1_13_04	s129
art_root_io				v1_13_03	s128
art_root_io				v1_11_03	s120a
artdaq_core             v3_10_00
artdaq_utilities		v1_09_00
artdaq_mfextensions		v1_09_00
xmlrpc_c				v1_54_06b
swig					v4_1_1		-		optional
artdaq_epics_plugin		v1_06_00	-		optional
artdaq_pcp_mmv_plugin	v1_04_00	-		optional
cetmodules				v3_24_00	-		only_for_build
end_product_list

# See https://cdcvs.fnal.gov/redmine/projects/cet-is-public/wiki/AboutQualifiers for information about the qualifiers used
# -nq- means there is no qualifier
# a "-" means the dependent product is not required by the parent and will not be setup
qualifier		art_root_io	artdaq_core		artdaq_utilities	xmlrpc_c	artdaq_mfextensions	artdaq_epics_plugin	artdaq_pcp_mmv_plugin	swig
c14:s129:debug	c14:debug	c14:s129:debug	c14:s129:debug		c14:debug	c14:s129:debug		c14:s129:debug		c14:s129:debug			c14:debug
c14:s129:prof	c14:prof	c14:s129:prof	c14:s129:prof		c14:prof	c14:s129:prof		c14:s129:prof		c14:s129:prof			c14:prof
e20:s129:debug	e20:debug	e20:s129:debug	e20:s129:debug		e20:debug	e20:s129:debug		e20:s129:debug		e20:s129:debug			e20:debug
e20:s129:prof	e20:prof	e20:s129:prof	e20:s129:prof		e20:prof	e20:s129:prof		e20:s129:prof		e20:s129:prof			e20:prof
e26:s129:debug	e26:debug	e26:s129:debug	e26:s129:debug		e26:debug	e26:s129:debug		e26:s129:debug		e26:s129:debug			e26:debug
e26:s129:prof	e26:prof	e26:s129:prof	e26:s129:prof		e26:prof	e26:s129:prof		e26:s129:prof		e26:s129:prof			e26:prof
e28:s129:debug	e28:debug	e28:s129:debug	e28:s129:debug		e28:debug	e28:s129:debug		e28:s129:debug		e28:s129:debug			e28:debug
e28:s129:prof	e28:prof	e28:s129:prof	e28:s129:prof		e28:prof	e28:s129:prof		e28:s129:prof		e28:s129:prof			e28:prof

c14:s128:debug	c14:debug	c14:s128:debug	c14:s128:debug		c14:debug	c14:s128:debug		c14:s128:debug		c14:s128:debug			c14:debug
c14:s128:prof	c14:prof	c14:s128:prof	c14:s128:prof		c14:prof	c14:s128:prof		c14:s128:prof		c14:s128:prof			c14:prof
e20:s128:debug	e20:debug	e20:s128:debug	e20:s128:debug		e20:debug	e20:s128:debug		e20:s128:debug		e20:s128:debug			e20:debug
e20:s128:prof	e20:prof	e20:s128:prof	e20:s128:prof		e20:prof	e20:s128:prof		e20:s128:prof		e20:s128:prof			e20:prof
e26:s128:debug	e26:debug	e26:s128:debug	e26:s128:debug		e26:debug	e26:s128:debug		e26:s128:debug		e26:s128:debug			e26:debug
e26:s128:prof	e26:prof	e26:s128:prof	e26:s128:prof		e26:prof	e26:s128:prof		e26:s128:prof		e26:s128:prof			e26:prof
e28:s128:debug	e28:debug	e28:s128:debug	e28:s128:debug		e28:debug	e28:s128:debug		e28:s128:debug		e28:s128:debug			e28:debug
e28:s128:prof	e28:prof	e28:s128:prof	e28:s128:prof		e28:prof	e28:s128:prof		e28:s128:prof		e28:s128:prof			e28:prof

c7:s120a:debug	c7:debug	c7:s120a:debug	c7:s120a:debug		c7:debug	c7:s120a:debug		c7:s120a:debug		c7:s120a:debug			c7:debug
c7:s120a:prof	c7:prof		c7:s120a:prof	c7:s120a:prof		c7:prof		c7:s120a:prof		c7:s120a:prof		c7:s120a:prof			c7:prof
c14:s120a:debug	c14:debug	c14:s120a:debug	c14:s120a:debug		c14:debug	c14:s120a:debug		c14:s120a:debug		c14:s120a:debug			c14:debug
c14:s120a:prof	c14:prof	c14:s120a:prof	c14:s120a:prof		c14:prof	c14:s120a:prof		c14:s120a:prof		c14:s120a:prof			c14:prof
e20:s120a:debug	e20:debug	e20:s120a:debug	e20:s120a:debug		e20:debug	e20:s120a:debug		e20:s120a:debug		e20:s120a:debug			e20:debug
e20:s120a:prof	e20:prof	e20:s120a:prof	e20:s120a:prof		e20:prof	e20:s120a:prof		e20:s120a:prof		e20:s120a:prof			e20:prof
e26:s120a:debug	e26:debug	e26:s120a:debug	e26:s120a:debug		e26:debug	e26:s120a:debug		e26:s120a:debug		e26:s120a:debug			e26:debug
e26:s120a:prof	e26:prof	e26:s120a:prof	e26:s120a:prof		e26:prof	e26:s120a:prof		e26:s120a:prof		e26:s120a:prof			e26:prof

end_qualifier_list

table_fragment_begin
 pathPrepend(PYTHONPATH, ${ARTDAQ_LIB})
table_fragment_end

# Preserve tabs and formatting in emacs and vi / vim:

### Local Variables:
### tab-width: 4
### End:

# vi:set ts=4 noexpandtab:
